# -*- coding: utf-8 -*-
"""Problem Set One - Data Science Math.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oezjYB5D0HIpDY7v5HY0eb64fq5_s4-m

# Problem Set One

## Question One - Load MNIST and show a montage of the images

Import TensorFlow library for machine learning tasks, and import Matplotlib library for data visualization
"""

import tensorflow as tf
import matplotlib.pyplot as plt

"""Load the MNIST dataset"""

mnist = tf.keras.datasets.mnist

"""Split the dataset into training and testing sets"""

(x_train, y_train), (x_test, y_test) = mnist.load_data()

"""Create a new figure (plot) with a specified size of 10x10 inches"""

plt.figure(figsize=(10, 10))

"""Cycle through the first 25 images in the training set, Create a subplot within a 5x5 grid; i + 1 selects the current subplot, Display the current image from the training set using a grayscale colormap, Set the title of the subplot to the corresponding label from the training set, Turn off the axis (axis labels and ticks) for cleaner visualization, Adjust the layout of subplots for better spacing, Display the entire montage of 25 images."""

for i in range(25):
  plt.subplot(5, 5, i + 1)
  plt.imshow(x_train[i], cmap='gray')
  plt.title(f"Label: {y_train[i]}")
  plt.axis('off')
  plt.tight_layout()
  plt.show()

"""# Question Two - Run a random y=mx model on MNIST

Import the NumPy library for numerical operations
"""

import numpy as np

"""Flatten the images: Reshape the training and testing image data from 2D (28x28) to 1D arrays (784 elements each)"""

x_train_flat = x_train.reshape(-1, 28 * 28)
x_test_flat = x_test.reshape(-1, 28 * 28)

"""Define a simple linear model: Create a random weight vector with 784 elements (one for each pixel)"""

m = np.random.rand(784)

"""Make predictions using the linear model: Calculate the dot product of the flattened training data and the random weight vector"""

y_pred = np.dot(x_train_flat, m)

"""# Question 3 - Train a random walk model to at least 75% accuracy

Import the random module for generating random values and performing random processes
"""

import random

"""Define a random walk model, and randomly assign a label (0-9) as a prediction"""

def random_walk_predict(data):
    predictions = []
    for i in range(len(data)):
        prediction = random.randint(0, 9)
        predictions.append(prediction)
    return predictions

"""Use the random walk model to make predictions"""

y_pred_random_walk = random_walk_predict(x_test_flat)